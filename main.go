package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strings"
)

type filesample struct {
	name       string
	executable bool
}

func main() {
	args := os.Args
	// Check if the filename was given
	if len(args) < 2 { //|| len(args) > 3 {
		log.Fatalf("[-] usage: ./main <filename> [/full/path/to/directory]")
	}
	// attempt to open a read the file and make sure it will be closed before the program ends
	v := os.Args[1]
	filenames := getFilenames(v)
	fnamelen := len(filenames)
	ch := make(chan filesample, fnamelen)
	// show the result
	for i := 0; i < fnamelen; i++ {
		go func(id int) {
			f, err := os.Open(filenames[id])
			if err != nil {
				log.Printf("Error when opening %v: %v", filenames[id], err)
			}
			defer f.Close()
			result := filesample{
				name:       f.Name(),
				executable: verifyifPE(f),
			}
			ch <- result
		}(i)
	}
	var warnings []string

	for fnamelen > 0 {
		result := <-ch
		switch {
		case result.executable:
			fmt.Printf("%v : is a windows executable\n", result.name)
			warnings = append(warnings, result.name)
		case !result.executable:
			fmt.Printf("%v : you might be safe\n", result.name)
		}
		fnamelen--
	}
	close(ch)
	fmt.Println("\n---------------------------------------\n")
	fmt.Printf("Found: %d window's PE's\n", len(warnings))
	for _, v := range warnings {
		fmt.Printf("- %v\n", v)
	}

}

func verifyifPE(f *os.File) bool {
	// try to fetch 2 initial bytes from the file
	b := []byte{0, 0}
	if _, err := f.ReadAt(b, 0); err != nil {
		log.Printf("Error:%v\n", err)
	}

	// verify if this file is matching windows PE file type
	result := bytes.HasPrefix(b, []byte("MZ"))
	return result
}

func getFilenames(s string) []string {
	// change to user defined directory if provided
	if len(os.Args) == 2 {
		if err := os.Chdir(os.Args[1]); err != nil {
			log.Fatalf("Error: %v", err)
		}
	}

	// collect all filenames
	cmd := exec.Command("ls", "-l")
	output, err := cmd.Output()
	if err != nil {
		log.Printf("Error while ls: %v\n", err)
	}

	// create and return the slice containing all of the filenamess
	buffer := bytes.NewBuffer(output)
	str := strings.Split(buffer.String(), "\n")
	reg := regexp.MustCompile(`:\d\d\s.*`)
	var filename []string
	for i, line := range str {
		if i != 0 {
			st := reg.FindString(line)
			addline := false
			if len(st) > 0 {
				switch {
				//case line[0] == byte('d'):
				//	fmt.Println("is directory")
				case line[0] == byte('-'):
					//	fmt.Println("is regular file")
					addline = true
				//case line[0] == byte('l'):
				//	fmt.Println("it is a link")
				default:
					continue
					//fmt.Println("some other type of file")
				}
			}
			if addline { //st != "" {
				if !strings.Contains(st, "->") {
					filename_raw := st[4:]
					filename = append(filename, filename_raw)
				}
			}
		}
	}
	return filename
}
